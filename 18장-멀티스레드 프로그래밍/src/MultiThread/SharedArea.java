package MultiThread;
//공유 영역을 표현하는 클래스
/*
 * 이 클래스의 객체를 생성해서 양쪽 스레드에 객체의 참조값을 넘겨주면, 두 스레드는 그 참조값을 이용해서 result 필드에 데이터를 읽고 쓸 수 있다.
 */
public class SharedArea {
	double result; //공유 데이터를 저장 할 필드
	volatile boolean isReady; //공유 데이터가 쓰여졌는지 여부를 표현하는 필드, 디폴트 값을 false
	/*
	 * CalcThread 가 계산된 파이 값을 공유 영역에 쓰기도 전에 PrintThread 가 공유 영역의 데이터를 읽어가면
	 * 정상적인 출력이 이루어지지 않기 때문에 SharedArea class 에 데이터 유무를 표시하는 필드를 추가하여
	 * 위와 같은 오류가 발생하는 것을 방지한다.(스레드의 실행 순서 조절)
	 */
	/*
	 * 어떤 자바 컴파일러는 프로그램의 성능 향상을 위해 소스코드에 있는 불필요한 명령문 실행을 줄이거나 생략한다.
	 * 예를 들어 변수의 값을 바꾸지 않고 반복해서 체크 할 경우에는 그 값을 한 번 가져다 놓고 여러 번 사용하도록 최적화 시키는데
	 * 그렇게 되면 PrintThread 의 while 문은 무한 루프가 되어버린다.
	 * 그런 문제가 발생하지 않도록 하려면 해당 필드의 선언문 앞에 volatile("휘발성 이라는 뜻") 이라는 키워드를 붙이면 된다.
	 * volatile 은 선언된 필드를 최적화 대상에서 제외시키는 키워드 이기 때문에, 이렇게 선언된 공유 영역 클래스를 가지고 
	 * PrintThread 를 컴파일 하면 위에 말한 것과 같은 문제는 발생하지 않게 된다.
	 */
}
