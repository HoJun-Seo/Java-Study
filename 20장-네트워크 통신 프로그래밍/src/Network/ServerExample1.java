package Network;

import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
/*
 * TCP/IP 프로토콜
 * 이중에서 IP 프로토콜은 네트워크에 연결된 개개의 컴퓨터에 유일한 주소를 붙이는 규칙을 정의하는 프로토콜이다.(IP 주소)
 * 인터넷에 연결된 모든 컴퓨터는 IP 프로토콜에 의해 유일한 주소를 부여받는다.
 * 통신 프로그램이 대상 컴퓨터를 찾을 때는 이 IP 주소를 이용하나, 통신 프로그램이 실질적으로 데이터를 교환하는 대상은 컴퓨터가 아니라 프로그램 이기 때문에 
 * 네트워크 통신을 하기 위해서는 상대 컴퓨터에서 작동중인 여러 프로그램 들 중 하나를 식별 할 수 있어야 한다.
 * 그런 식별은 운영체제에서 관리하는 포트를 통해 가능하다. 포트 - 네트워크를 통해 데이터를 주고받는 가상의 출입구
 * TCP/IP 를 지원하는 운영체제 에서는 포트마다 번호를 붙여서 관리하는데, 그 번호는 0 ~ 65535 범위의 정수이다. - IP 주소와 함께 포트 번호를 사용하면 통신할 대상이 되는 프로그램을 찾을 수 있다.
 * 같은 포트를 여러 프로그램이 사용하려고 하면 안 되기 때문에 통신 프로그램을 작성할 때는 다른 프로그램이 사용하고 있는 포트 번호를 확인해야 한다.
 * 사용중인 포트 번호는 운영체제가 제공하는 명령을 통해 확인 할 수 있는데, 윈도우즈 계열의 운영체제에서는 netstat 라는 명령을 실행해서 확인할 수 있다.- 이미 사용중인 포트 번호에 접근하려고 하면 포트 바인딩으로 인한 에러가 발생한다.
 * 0 ~ 1023 까지는 시스템이 사용하는 포트 번호이기 때문에 응용 프로그램에서는 1024 이상의 포트 번호 중 하나를 선택해야 한다.
 * TCP/IP 프로토콜로 통신하는 두 프로그램은 데이터를 교환하기 전에 먼저 연결(connection) 을 맺어야 한다.
 * 연결을 맺기 위해서는 한 프로그램은 포트를 열어놓고 연결 요청이 오기를 기다려야 하고, 다른 프로그램은 그 포트로 연결 요청을 보내야 한다.
 * 이때 전자 역할을 하는 프로그램을 서버 프로그램 이라고 하고, 후자 역할을 하는 프로그램을 클라이언트 프로그램 이라고 한다.
 * 클라이언트 프로그램과 서버 프로그램이 서로 연결을 맺은 다음에는 그 연결을 통해 데이터를 주고 받을 수 있다.
 * 연결을 맺을때도 포트를 사용해야 하고, 데이터를 교환할 때도 포트를 사용해야 한다. 하지만 포트는 운영체제 관점에서 보았을 때의 데이터 통신 출입구이고, 자바 프로그램 안에서는 직접 사용할 수 없다.
 * 자바 프로그램 안에서 포트를 사용하기 위해서는 소켓을 이용해야 한다. 소켓에는 서버 소켓과 클라이언트 소켓 두 종류가 있다.
 * 서버 소켓은 서버 프로그램에서만 사용되는 소켓이다. 이 소켓은 포트를 통해 연결 요청이 오기를 기다리다가, 연결 요청이 오면 클라이언트와 연결을 맺고
 * 또 다른 소켓을 만드는 일을 한다.
 * 이렇게 만들어지는 소켓을 클라이언트 소켓(또는 그냥 소켓)이라고 한다. 실제로 데이터 전송에 사용되는 것은 이 클라이언트 소켓이다.
 * 클라이언트 프로그램 에서는 연결 요청을 기다릴 필요가 없기 때문에 바로 클라이언트 소켓을 생성한다.
 * 클라이언트 프로그램에서 생성한 클라이언트 소켓은 서버 프로그램으로 연결 요청을 하는 일과 데이터 전송을 하는 일을 둘 다 한다.  
 */
public class ServerExample1 {
	public static void main(String[] args) {
		ServerSocket serverSocket = null;
		Socket socket = null;
		try {
			serverSocket = new ServerSocket(9000); //서버 소켓을 생성한다.
			socket = serverSocket.accept(); //연결 요청이 오면 소켓을 생성한다.
			InputStream in = socket.getInputStream();
			OutputStream out = socket.getOutputStream();
			//수신된 데이터를 출력한다.
			byte arr[] = new byte[100];
			in.read(arr);
			System.out.println(new String(arr));
			//수신된 데이터를 출력한다.
			//데이터를 송신한다.
			String str = "Hello, Client";
			out.write(str.getBytes());
			//데이터를 송신한다.
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
		finally {
			try {
				socket.close();//소켓을 닫는다.
			}
			catch(Exception e) {
			}
			try {
				serverSocket.close(); //서버 소켓을 닫는다.
			}
			catch(Exception e) {
			}
		}
	}
}
/*
 * 서버 소켓과 클라이언트 소켓은 자바 프로그램 안에서 모두 객체로 표현된다. 서버 소켓은 java.net 패키지에 있는 ServerSocket class 의 객체로 표현되고
 * 클라이언트 소켓은 같은 패키지에 있는 Socket class 의 객체로 표현된다.
 * 서버 소켓을 생성할 때는 생성자 파라미터로 포트 번호를 넘겨줘야 한다. 이때 넘겨주는 포트 번호는 다른 프로그램이 사용하지 않는 프토 번호라야 한다.
 * ServerSocket serverSocket = new ServerSocket(9000); - 9000 : 포트 번호
 * ServerSocket class 에는 클라이언트 로부터 연결 요청이 오기를 기다리는 accept method 가 있다.
 * 위에서 생성한 ServerSocket 객체에 대해 이 메소드를 호출하면 9000번 포트를 통해 연결 요청이 들어오기를 기다릴 수 있다.
 * Socket socket = serverSocket.accept(); - 서버 소켓으로 연결 요청이 들어오면 연결을 맺고, 클라이언트 소켓을 생성해서 리턴하는 메소드
 * accept method 는 포트를 열어놓고 연결 요청이 오기를 기다리다가, 연결 요청이 들어오면 클라이언트 프로그램과 연결을 맺은 후에 그 결과를 가지고 클라이언트 소켓을 생성해서 리턴한다.
 */
