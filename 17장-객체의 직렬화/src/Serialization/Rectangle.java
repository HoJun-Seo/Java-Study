package Serialization;
//직렬화 가능 클래스 하나 생성
public class Rectangle implements java.io.Serializable{
	private static final long serialVersionUID = 100;
	int width, height;
	Rectangle(int width, int height){
		this.width = width;
		this.height = height;
	}
	//객체 직렬화,역직렬화 프로그램을 만든 이후 시간이 조금 지나 아래와 같은 메소드를 작성했다고 가정한다.
	int getArea() {
		return width * height;
	}
	/*
	 * 클래스의 버전 번호는 자바의 직렬화,역직렬화 매커니즘이 실행될 때 자동으로 부여되는데, 직렬화 가능 클래스의 내용이 그대로이면 같은 번호가 부여되고
	 * 클래스의 구성요소가 하나라도 바뀌면 완전히 다른 버전 번호가 부여된다.
	 * 그런데 메소드는 직렬화 대상에 포함되지 않음에도 불구하고 새로운 메소드가 추가 됨으로 인해 버전 번호가 바뀌게 된다. - 규칙이 지나치게 엄격함
	 * 이런식으로 버전 번호가 바뀌는 것을 막기 위해서는 프로그래머가 직렬화 가능 클래스에 직접 버전 번호를 붙이면 된다.
	 * 예) static final long serialVersionUID = 100; - 100 : 버전 번호
	 * 클래스 안에 serialVersionUID 라는 이름의 long 타입 상수 필드(static final 필드)를 선언해두고, 그 필드의 초기값으로 버전 번호를 대입하기만 하면된다.
	 * 이렇게 붙여진 번호는 클래스에 구성요소를 추가하거나 삭제해도 바뀌지 않는다.
	 * 
	 * 프로그래머가 임의로 선택한 버전 번호를 사용하다보면 우연에 의해, 또는 습관에 의해 엉뚱한 클래스에 같은 버전 번호를 부여하게 될 수 있다.
	 * 이런 식으로 일어나는 버전 번호의 충돌을 최소화 하고자 한다면 jdk 에 포함되어 있는 버전 번호 생성 명령인 serialver 을 사용하는 것이 좋다.
	 * 이 명령은 직렬화 가능 클래스를 컴파일한 디렉토리에서 실행해야 하고, 실행 방법은 해당 디렉토리에서 cmd 를 실행시킨 후 직렬화 가능 클래스를 컴파일 한 다음, 컴파일한 디렉토리에서 serialver 실행파일명(.java 는 붙이지 않는다.) 을 실행하면 버전 번호가 생성된다.
	 * serialver 명령은 서로 다른 클래스에 대해 가능한 다른 버전 번호를 생성하는 알고리즘을 가지고 있기 때문에, 이 명령을 이용하여 생성한 버전 번호는 우연에 의해 서로 출동할 가능성이 미미할 정도로 작다.
	 * 이렇게 생성한 버전 번호를 직렬화 가능 클래스에 붙이는 방법은 앞에서의 경우와 마찬가지로, 직렬화 가능 클래스에 serialVersionUID 상수 필드를 추가하고, 그 필드에 초기 값으로 버전 번호를 대입하면 된다.
	 * 예) static final long serialVersionUID = 생성된 버전 번호 - 메소드를 추가 할 때도 버전 번호를 유지할것 
	 */
}
